import { ChangeEvent, useMemo, useRef, useState } from 'react';
import { FaRobot } from 'react-icons/fa6';
import { IoCloudUpload } from 'react-icons/io5';
import {
  Box,
  ModalProps as MantineModalProps,
  Stack,
  Text,
} from '@mantine/core';

import { ALLOWED_DOCUMENT_FILE_TYPES, MESSAGES } from '@/constants';
import {
  DEFAULT_FORM_TITLE,
  useBuildFormContext,
  useElementLayouts,
} from '@/contexts';
import { useAutoGenFormMutation } from '@/redux/api/formApi';
import { ElementItem, ErrorResponse } from '@/types';
import { convertAutoGeneratedElements, getFileSize, toastify } from '@/utils';

import { Modal } from '../Modal';
import { UploadedFilePreview } from '../UploadedFilePreview';

interface AutoGenFormModalProps extends MantineModalProps {
  onClickCancel: () => void;
}

export const AutoGenFormModal = ({
  onClickCancel,
  ...props
}: AutoGenFormModalProps) => {
  const [selectedFile, setSelectedFile] = useState<File>();

  const fileInputRef = useRef<HTMLInputElement>(null);

  const { setForm } = useBuildFormContext();

  const { setElements } = useElementLayouts();

  const [autoGenForm, { isLoading: isFormGenerating }] =
    useAutoGenFormMutation();

  const selectedFileSize: string = useMemo(() => {
    if (!selectedFile) return '';
    return getFileSize(selectedFile);
  }, [selectedFile]);

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files) return;
    const file = event.target.files[0];

    if (!ALLOWED_DOCUMENT_FILE_TYPES.slice(1, 3).includes(file.type)) {
      toastify.displayError(MESSAGES.ONLY_SUPPORT_WORD_FILES);
      event.target.value = '';
      return;
    }
    if (file) {
      setSelectedFile(file);
    }
    event.target.value = '';
  };

  const handleClearFile = () => {
    setSelectedFile(undefined);
  };

  const handleGenerateForm = () => {
    if (selectedFile) {
      autoGenForm(selectedFile).then((res) => {
        if ('data' in res) {
          const convertedElements = convertAutoGeneratedElements(res.data.data);
          setForm((prevState) => ({
            ...prevState,
            title: prevState.title || DEFAULT_FORM_TITLE,
            elements: convertedElements as ElementItem[],
          }));
          setElements([...(convertedElements as ElementItem[])]);
          toastify.displaySuccess(MESSAGES.AUTO_GENERATE_FORM_SUCCESS);
          handleCloseModal();
          return;
        }
        if (res.error as ErrorResponse)
          toastify.displayError(MESSAGES.AUTO_GENERATE_FORM_FAILED);
      });
    } else {
      toastify.displayError(MESSAGES.NO_FILE_CHOSEN);
    }
  };

  const handleCloseModal = () => {
    onClickCancel();
    handleClearFile();
  };

  return (
    <Modal
      {...props}
      onClose={handleCloseModal}
      size='lg'
      headerIcon={<FaRobot className='text-white' />}
      headerTitle='Auto Generate Form'
      body={
        <Stack className='min-h-[190px] justify-center gap-5 px-3 py-8'>
          <Text className='text-base font-semibold'>Upload your file</Text>
          <input
            type='file'
            ref={fileInputRef}
            onChange={(event) => handleFileChange(event)}
            className='hidden'
            accept={ALLOWED_DOCUMENT_FILE_TYPES.slice(1, 3).join(',')}
          />
          {selectedFile ? (
            <UploadedFilePreview
              fileName={selectedFile.name}
              fileSize={selectedFileSize}
              handleClearUploadedFile={handleClearFile}
            />
          ) : (
            <Box
              className='flex min-h-16 cursor-pointer flex-col items-center justify-center gap-2 rounded-lg border border-dashed border-slate-500 bg-slate-100 p-4'
              component='button'
              type='button'
              disabled={isFormGenerating}
              onClick={() => {
                fileInputRef.current?.click();
              }}
            >
              <IoCloudUpload size={36} className='text-slate-500' />
              <Text className='text-sm font-medium text-slate-600'>
                Click here to upload a file
              </Text>
              <Text className='text-xs text-slate-400'>
                Supported formats: .doc, .docx
              </Text>
              <Text className='text-xs text-slate-400'>
                Maximum file size: 10 MB
              </Text>
            </Box>
          )}
        </Stack>
      }
      onClickCancel={handleCloseModal}
      onClickSubmit={handleGenerateForm}
      submitButtonProps={{
        title: 'Generate',
        disabled: !selectedFile,
      }}
      isLoading={isFormGenerating}
    />
  );
};
