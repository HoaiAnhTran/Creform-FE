import { v4 as uuidv4 } from 'uuid';

import {
  defaultAddressConfig,
  defaultAddressHeightWidth,
  defaultDatePickerConfig,
  defaultDropdownConfig,
  defaultDropdownHeightWidth,
  defaultElementHeightWidth,
  defaultEmailConfig,
  defaultFileUploadConfig,
  defaultFileUploadHeightWidth,
  defaultFullnameConfig,
  defaultLongTextHeightWidth,
  defaultMultipleChoiceConfig,
  defaultMultipleChoiceHeightWidth,
  defaultPhoneConfig,
  defaultScaleRatingConfig,
  defaultScaleRatingHeightWidth,
  defaultShortTextHeightWidth,
  defaultSingleChoiceConfig,
  defaultSingleChoiceHeightWidth,
  defaultSubmitConfig,
  defaultSubmitHeightWidth,
  defaultTextConfig,
  defaultTimeHeightWidth,
  defaultTimeInputConfig,
} from '@/constants';
import {
  AutoGeneratedElement,
  ElementItem,
  ElementType,
  FormDetailsResponse,
  FormRequest,
  ImportFormResponse,
} from '@/types';
import { FieldAnswer, FormAnswer } from '@/types/responses';

export const addTextToFieldOfElement = (
  form: FormRequest | FormDetailsResponse,
) => {
  const updatedElements = form.elements.map((element) => {
    const updatedFields = element.fields.map((field) => ({
      ...field,
      text: '',
    }));
    return {
      ...element,
      fields: updatedFields,
    };
  });

  return { ...form, elements: updatedElements };
};

export const removeTextFromFieldOfElement = (form: FormRequest) => {
  const formWithoutText = JSON.parse(JSON.stringify(form));

  formWithoutText.elements.forEach((element: ElementItem) => {
    element.fields.forEach((field) => {
      delete field.text;
    });
  });

  return formWithoutText;
};

export const getFormAnswerFields = (elements: ElementItem[]) => {
  const formAnswers: FormAnswer[] = [];

  for (const element of elements) {
    if (!('fieldLabel' in element.config)) continue;
    const FieldAnswers: FormAnswer = {
      elementId: element.id,
      answers: [],
    };
    for (const field of element.fields) {
      const answer: FieldAnswer = {
        fieldId: field.id,
        text: field.text!,
      };
      FieldAnswers.answers.push(answer);
    }
    formAnswers.push(FieldAnswers);
  }
  return { formAnswers: formAnswers };
};

export const convertImportFormResponse = (form: ImportFormResponse) => {
  const convertedElements = form.elements.map((element) => {
    const uid = uuidv4();

    switch (element.type) {
      case ElementType.SHORT_TEXT:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...element.gridSize,
            ...defaultShortTextHeightWidth,
          },
          config: { ...defaultTextConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'shortText',
            },
          ],
        };
      case ElementType.LONG_TEXT:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...element.gridSize,
            ...defaultLongTextHeightWidth,
          },
          config: { ...defaultTextConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'longText',
            },
          ],
        };
      case ElementType.SINGLE_CHOICE:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...element.gridSize,
            ...defaultSingleChoiceHeightWidth,
          },
          config: { ...defaultSingleChoiceConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'singleChoice',
            },
          ],
        };
      case ElementType.MULTIPLE_CHOICE:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...element.gridSize,
            ...defaultMultipleChoiceHeightWidth,
          },
          config: { ...defaultMultipleChoiceConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'multipleChoice',
            },
          ],
        };
      case ElementType.DROPDOWN:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...element.gridSize,
            ...defaultDropdownHeightWidth,
          },
          config: { ...defaultDropdownConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'dropdown',
            },
          ],
        };
      case ElementType.FILE_UPLOAD:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...element.gridSize,
            ...defaultFileUploadHeightWidth,
          },
          config: { ...defaultFileUploadConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'fileUpload',
            },
          ],
        };
      case ElementType.DATEPICKER:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...element.gridSize,
            ...defaultElementHeightWidth,
          },
          config: { ...defaultDatePickerConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'datePicker',
            },
          ],
        };
      case ElementType.TIME:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...element.gridSize,
            ...defaultTimeHeightWidth,
          },
          config: { ...defaultTimeInputConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'timeInput',
            },
          ],
        };
      case ElementType.SCALE_RATING:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...element.gridSize,
            ...defaultScaleRatingHeightWidth,
          },
          config: { ...defaultScaleRatingConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'scaleRating',
            },
          ],
        };
      default:
        break;
    }
  });

  const convertedElementsHavingSubmitBtn = [
    ...convertedElements,
    {
      id: uuidv4(),
      type: ElementType.SUBMIT,
      gridSize: {
        x: 0,
        y: 0,
        ...defaultSubmitHeightWidth,
      },
      config: { ...defaultSubmitConfig },
      fields: [],
    },
  ];

  const convertedElementsWithCoordinates = convertedElementsHavingSubmitBtn.map(
    (currentElement, currentIndex) => {
      let newY = 0;
      convertedElements.forEach((element, index) => {
        if (index >= currentIndex) return;
        else {
          newY += element?.gridSize.h || 0;
        }
      });
      return {
        ...currentElement,
        gridSize: {
          ...currentElement?.gridSize,
          y: newY,
        },
      };
    },
  );

  return { ...form, elements: convertedElementsWithCoordinates };
};

export const convertAutoGeneratedElements = (
  elements: AutoGeneratedElement[],
) => {
  const initialGridSize = {
    x: 0,
    y: 0,
    w: 0,
    h: 0,
  };

  const convertedElements = elements.map((element) => {
    const uid = uuidv4();

    switch (element.type) {
      case ElementType.EMAIL:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultElementHeightWidth,
          },
          config: { ...defaultEmailConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'email',
            },
          ],
        };
      case ElementType.FULLNAME:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultElementHeightWidth,
          },
          config: { ...defaultFullnameConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'firstName',
            },
            {
              id: uuidv4(),
              name: 'lastName',
            },
          ],
        };
      case ElementType.ADDRESS:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultAddressHeightWidth,
          },
          config: { ...defaultAddressConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'street',
            },
            {
              id: uuidv4(),
              name: 'ward',
            },
            {
              id: uuidv4(),
              name: 'district',
            },
            {
              id: uuidv4(),
              name: 'city',
            },
          ],
        };
      case ElementType.PHONE:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultElementHeightWidth,
          },
          config: { ...defaultPhoneConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'phoneNumber',
            },
          ],
        };
      case ElementType.SHORT_TEXT:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultShortTextHeightWidth,
          },
          config: { ...defaultTextConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'shortText',
            },
          ],
        };
      case ElementType.LONG_TEXT:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultLongTextHeightWidth,
          },
          config: { ...defaultTextConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'longText',
            },
          ],
        };
      case ElementType.SINGLE_CHOICE:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultSingleChoiceHeightWidth,
          },
          config: { ...defaultSingleChoiceConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'singleChoice',
            },
          ],
        };
      case ElementType.MULTIPLE_CHOICE:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultMultipleChoiceHeightWidth,
          },
          config: { ...defaultMultipleChoiceConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'multipleChoice',
            },
          ],
        };
      case ElementType.DROPDOWN:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultDropdownHeightWidth,
          },
          config: { ...defaultDropdownConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'dropdown',
            },
          ],
        };
      case ElementType.FILE_UPLOAD:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultFileUploadHeightWidth,
          },
          config: { ...defaultFileUploadConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'fileUpload',
            },
          ],
        };
      case ElementType.DATEPICKER:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultElementHeightWidth,
          },
          config: { ...defaultDatePickerConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'datePicker',
            },
          ],
        };
      case ElementType.TIME:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultTimeHeightWidth,
          },
          config: { ...defaultTimeInputConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'timeInput',
            },
          ],
        };
      case ElementType.SCALE_RATING:
        return {
          id: uid,
          type: element.type,
          gridSize: {
            ...initialGridSize,
            ...defaultScaleRatingHeightWidth,
          },
          config: { ...defaultScaleRatingConfig, ...element.config },
          fields: [
            {
              id: uuidv4(),
              name: 'scaleRating',
            },
          ],
        };
      default:
        break;
    }
  });

  const convertedElementsHavingSubmitBtn = [
    ...convertedElements,
    {
      id: uuidv4(),
      type: ElementType.SUBMIT,
      gridSize: {
        ...initialGridSize,
        ...defaultSubmitHeightWidth,
      },
      config: { ...defaultSubmitConfig },
      fields: [],
    },
  ];

  const convertedElementsWithCoordinates = convertedElementsHavingSubmitBtn.map(
    (currentElement, currentIndex) => {
      let newY = 0;
      convertedElements.forEach((element, index) => {
        if (index >= currentIndex) return;
        else {
          newY += element?.gridSize.h || 0;
        }
      });
      return {
        ...currentElement,
        gridSize: {
          ...currentElement?.gridSize,
          y: newY,
        },
      };
    },
  );

  return convertedElementsWithCoordinates;
};
